---
layout: default
modal-id: 3
date: 2014-07-16
img: database.png
alt: image-alt
imgTwo: maintenance_records.png
alt: image-alt-2
imgThree: crossJoin.png
alt: image-alt-3
project-date: April 2021
language: SQL
category: MySQL Database
github: <a href="https://github.com/spowers0409/Fleet-Maintenance-Records.git"><li>Fleet Maintenance Records</li></a>
description1: <strong> Briefly describe the artifact.  </strong>The artifact that I have chosen is from DAD-220. In this class the objective was to view data from a .csv file that held information about Fleet Maintenance Records. The data table that was provided gave vehicle ID, State, Repair, Reason, Year, Make, and Body Type. The goal was to search for records using any of the data table options and return specified information as well as find common repairs. Below you will see the only table that was created originally, with addition of the customerID column that I added myself. 
description2: <strong> Justify the inclusion of the artifact in your ePortfolio. </strong>I chose this artifact because it was my first introduction to databases and I had learned alot about creating databases, creating the tables inside of databases and then how to manipulate databases in order to pull specific information. I really liked this because it did open my eyes to not only how databases work, but how important it is to maintain a database, especially for businesses and large companies that can go through hundreds of thousands if not millions and billions of lines of data every single day. As my time with SNHU continued, so did the use of databases and it became clear to me that databases are run in the background of pretty much everything that we do in our daily lives. I wanted to add more complexity to the first database I had ever created and decided to add in another table to make this seem more real world like. I took my time from working at Jiffy Lube in my younger years as an example of how this sort of database would work and what I would see when I was looking customers up. I understand that people sometimes have more than one vehicle, and at times even move to other locations. To be able to track not only the vehicle maintenance records, but also track the customers that own the vehicles and where these customers live. 
description3: <strong> Reflect on the process of enhancing the artifact. </strong>When I took on this project, I realized that I had originally created this in a virtual machine that was running a flavor of Linux, and given by a program that was offered from SNHU. Before I started I needed to decide whether to setup a new virtual machine on my own PC, or set up MySQL for Windows. I decided that I may want to work more with databases in the future and downloaded MySQL 8.0, which also came with MySQL Workbench. From there I re-created the original database but I was unable to download the .csv from the school files as they were locked, and instead created my own .csv file with only a few vehicles there. Originally, the records table did not have a customerID column, and also did not have a customers table so it was a database with only one table, the records table. After I created the database and the records table, the changes I wanted to add in were that of addingt customers.I created the customers table, added in some customer information but it was still missing a tie-in between the two tables, so I created the customerID column. Since I had already created both tables without the customerID column, I used the command ALTER TABLE records ADD [COLUMN] customerID varchar(255) [FIRST]. I used the the [FIRST] command in order to place the new column at the beginning of the table. From there I was able to pull and combine information from both tables using the CROSS JOIN command as you will see below, linking the vehicles to the owners of the vehicles. 
description4: <strong> List of enhancements performed. </strong> <ul><li>Added "customerID" as the first column in records table</li><li>Created the customers table</li><li>Made new columns in the customers table</li><li>Added "customerID" as the first column in customers table</li><li>Made certain vehicles have same customerID matching customers</li><li>Created user privileges for new user with only read, create and update privileges</li></ul>
---
